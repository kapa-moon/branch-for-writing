'use client';

import React, { useState, useEffect } from 'react';
import { TiptapDocument } from '@/types/tiptap';
import { 
  IdentityDiffEngine, 
  IdentityDiffResult, 
  ThemeComparison, 
  MergeableThemeSegment 
} from '@/lib/diffEngine';
import { AIIdentityDiffEngine } from '@/lib/aiDiffEngine';
import './diff-editor.css';

interface DiffTiptapEditorProps {
  originalContent: TiptapDocument;
  comparisonContent: TiptapDocument;
  onMergeSegments: (selectedSegmentIds: string[]) => void;
  onHighlightText?: (text: string) => void;
  mainDocId?: string;
  refDocId?: string;
}

type ViewMode = 'holistic' | 'overlapping' | 'unique' | 'conflicts';

type CardStatus = 'active' | 'resolved' | 'ignored' | 'ai-enhancing' | 'ai-enhanced';

interface CardState {
  [cardId: string]: {
    status: CardStatus;
    expandedMain: boolean;
    expandedComparison: boolean;
    aiEnhanced?: any; // Store AI-enhanced content
  };
}

const DiffTiptapEditor: React.FC<DiffTiptapEditorProps> = ({ 
  originalContent, 
  comparisonContent, 
  onMergeSegments,
  onHighlightText,
  mainDocId,
  refDocId
}) => {
  const [diffResult, setDiffResult] = useState<IdentityDiffResult | null>(null);
  const [currentView, setCurrentView] = useState<ViewMode>('holistic');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [cardStates, setCardStates] = useState<CardState>({});
  const [confirmAction, setConfirmAction] = useState<{
    cardId: string;
    action: 'resolve' | 'merge' | 'ignore';
    show: boolean;
  }>({ cardId: '', action: 'resolve', show: false });
  const [aiHolisticSummary, setAiHolisticSummary] = useState<string[] | null>(null);
  const [isGeneratingHolisticSummary, setIsGeneratingHolisticSummary] = useState(false);

  // Initialize AI-powered diff engine
  const aiDiffEngine = new AIIdentityDiffEngine(); // Remove parameter since it's deprecated

  useEffect(() => {
    analyzeDifferences();
  }, [originalContent, comparisonContent, mainDocId, refDocId]); // Add dependencies for IDs

  // Convert TiptapDocument to text for AI processing
  const documentToText = (doc: TiptapDocument): string => {
    return doc.content?.map((node: any) => nodeToText(node)).join('\n') || '';
  };

  const nodeToText = (node: any): string => {
    if (node.type === 'text') {
      return node.text || '';
    }
    if (node.content) {
      return node.content.map((child: any) => nodeToText(child)).join(' ');
    }
    return '';
  };

  const analyzeDifferences = async () => {
    setIsAnalyzing(true);
    try {
      // Use AI-powered analysis with document IDs for caching
      const result = await aiDiffEngine.generateIdentityDiff(
        originalContent, 
        comparisonContent,
        mainDocId,  // Pass main document ID for caching
        refDocId    // Pass reference document ID for caching
      );
      
      setDiffResult(result);
      
      const initialCardStates: CardState = {};
      const allCards = [
        ...result.holistic,
        ...result.overlapping,
        ...result.unique.mainNarrative,
        ...result.unique.comparisonNarrative,
        ...result.conflicts
      ];
      
      // All cards start as 'ai-enhanced' since they're generated by AI
      allCards.forEach((card, index) => {
        const cardId = `${card.type}-${card.category}-${index}`;
        initialCardStates[cardId] = {
          status: 'ai-enhanced', // Changed from 'active' since all cards are AI-generated
          expandedMain: false,
          expandedComparison: false,
          aiEnhanced: {
            enhancedDescription: card.description,
            psychologicalInsight: card.explanation,
            developmentalSignificance: `Significance: ${Math.round(card.significance * 100)}%`,
            actionableInsight: 'This AI-generated insight helps understand identity development patterns.',
            emotionalPattern: 'Generated through comprehensive narrative analysis',
            narrativeCoherence: 'Contributes to overall narrative understanding'
          }
        };
      });
      
      setCardStates(initialCardStates);
      
      // Generate AI holistic summary
      generateHolisticSummary(result);
    } catch (error) {
      console.error('Error analyzing differences:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const generateHolisticSummary = async (diffResult: IdentityDiffResult) => {
    setIsGeneratingHolisticSummary(true);
    try {
      const mainText = documentToText(originalContent);
      const comparisonText = documentToText(comparisonContent);
      
      const allCards = [
        ...diffResult.holistic,
        ...diffResult.overlapping,
        ...diffResult.unique.mainNarrative,
        ...diffResult.unique.comparisonNarrative,
        ...diffResult.conflicts
      ];

      const response = await fetch('/api/ai/holistic-summary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mainText,
          comparisonText,
          comparisonCards: allCards
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setAiHolisticSummary(data.holisticSummary);
      } else {
        // Get the error details for debugging
        const errorData = await response.json().catch(() => null);
        console.error('Failed to generate holistic summary:', {
          status: response.status,
          statusText: response.statusText,
          errorData
        });
        
        // Show user-friendly error message
        if (response.status === 500 && errorData?.error?.includes('OpenAI API key not configured')) {
          console.error('🔑 OpenAI API key issue: Make sure you have OPENAI_API_KEY in your .env.local file (not REACT_APP_OPENAI_API_KEY)');
        }
      }
    } catch (error) {
      console.error('Error generating holistic summary:', error);
    } finally {
      setIsGeneratingHolisticSummary(false);
    }
  };

  const getCardId = (comparison: ThemeComparison, index: number) => {
    return `${comparison.type}-${comparison.category}-${index}`;
  };

  const handleActionClick = (cardId: string, action: 'resolve' | 'merge' | 'ignore') => {
    setConfirmAction({ cardId, action, show: true });
  };

  const confirmActionHandler = () => {
    const { cardId, action } = confirmAction;
    const status = action === 'ignore' ? 'ignored' : 'resolved';
    
    setCardStates(prev => ({
      ...prev,
      [cardId]: {
        ...prev[cardId],
        status
      }
    }));
    
    setConfirmAction({ cardId: '', action: 'resolve', show: false });
  };

  const cancelAction = () => {
    setConfirmAction({ cardId: '', action: 'resolve', show: false });
  };

  const toggleExpansion = (cardId: string, field: 'expandedMain' | 'expandedComparison', event: React.MouseEvent) => {
    event.stopPropagation();
    
    setCardStates(prev => ({
      ...prev,
      [cardId]: {
        ...prev[cardId],
        status: prev[cardId]?.status || 'ai-enhanced',
        expandedMain: prev[cardId]?.expandedMain || false,
        expandedComparison: prev[cardId]?.expandedComparison || false,
        [field]: !prev[cardId]?.[field]
      }
    }));
  };

  const truncateText = (text: string, maxLength: number = 100) => {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  };

  const getCardViewMode = (comparison: ThemeComparison): ViewMode => {
    // Determine which tab/view this card belongs to based on its type
    switch (comparison.type) {
      case 'overlapping':
        return 'overlapping';
      case 'unique':
        return 'unique';
      case 'conflict':
        return 'conflicts';
      case 'holistic':
      default:
        // For holistic cards, we need to check which array they came from
        if (!diffResult) return 'holistic';
        
        // Check if it's in overlapping
        if (diffResult.overlapping.find(card => card.description === comparison.description)) {
          return 'overlapping';
        }
        // Check if it's in unique arrays
        if (diffResult.unique.mainNarrative.find(card => card.description === comparison.description) ||
            diffResult.unique.comparisonNarrative.find(card => card.description === comparison.description)) {
          return 'unique';
        }
        // Check if it's in conflicts
        if (diffResult.conflicts.find(card => card.description === comparison.description)) {
          return 'conflicts';
        }
        
        return 'holistic';
    }
  };

  const handleThumbnailClick = (comparison: ThemeComparison) => {
    const targetView = getCardViewMode(comparison);
    if (targetView !== 'holistic') {
      setCurrentView(targetView);
    }
  };

  const renderComparisonCard = (comparison: ThemeComparison, index: number, isThumnail: boolean = false) => {
    const cardId = getCardId(comparison, index);
    const cardState = cardStates[cardId] || { status: 'ai-enhanced', expandedMain: false, expandedComparison: false };
    const aiEnhanced = cardState.aiEnhanced;

    return (
      <div 
        key={cardId} 
        className={`comparison-card ${comparison.category} ${comparison.type} ${cardState.status} ${isThumnail ? 'thumbnail' : ''}`}
        onClick={isThumnail ? () => handleThumbnailClick(comparison) : undefined}
        style={isThumnail ? { cursor: 'pointer' } : undefined}
      >
        <div className="card-header">
          <div className="card-badges">
            <span className={`theme-category ${comparison.category}`}>
              {comparison.category}
            </span>
          </div>
          
          {!isThumnail && ['ai-enhanced'].includes(cardState.status) && (
            <div className="card-actions" onClick={(e) => e.stopPropagation()}>
              <button 
                onClick={(e) => {
                  e.stopPropagation();
                  handleActionClick(cardId, 'resolve');
                }}
                className="action-btn resolve-btn"
                title="Resolve"
              >
                ✓
              </button>
              <button 
                onClick={(e) => {
                  e.stopPropagation();
                  handleActionClick(cardId, 'ignore');
                }}
                className="action-btn ignore-btn"
                title="Ignore"
              >
                ✕
              </button>
              <button 
                onClick={(e) => {
                  e.stopPropagation();
                  if (mainDocId && refDocId) {
                    aiDiffEngine.clearComparisonCache(mainDocId, refDocId).then(() => {
                      analyzeDifferences();
                    });
                  } else {
                    // Fallback for when IDs aren't available
                    analyzeDifferences();
                  }
                }}
                className="action-btn refresh-btn"
                title="Refresh AI"
              >
                🔄
              </button>
            </div>
          )}
        </div>

        <h4 className="card-title">
          {aiEnhanced ? aiEnhanced.enhancedDescription : comparison.description}
        </h4>

        {!isThumnail && (
          <>
            <div className="evidence-section">
              {comparison.mainNarrativeSpan && (
                <div className="evidence-item main-evidence">
                  <div className="evidence-header">
                    <span>Main Document Evidence:</span>
                    {/* <button 
                      onClick={(e) => toggleExpansion(cardId, 'expandedMain', e)}
                      className="expand-btn"
                    >
                      {cardState.expandedMain ? '▼ Collapse' : '▶ Expand'}
                    </button> */}
                    {onHighlightText && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          if (comparison.mainNarrativeSpan) {
                            onHighlightText(comparison.mainNarrativeSpan);
                          }
                        }}
                        className="highlight-btn"
                        title="Highlight in text"
                        style={{ marginLeft: '6px' }}
                      >
                        🔍
                      </button>
                    )}
                  </div>
                  <div className="evidence-text">
                    "{cardState.expandedMain 
                      ? comparison.mainNarrativeSpan 
                      : truncateText(comparison.mainNarrativeSpan)}"
                  </div>
                </div>
              )}

              {comparison.comparisonNarrativeSpan && (
                <div className="evidence-item comparison-evidence">
                  <div className="evidence-header">
                    <span>Comparison Document Evidence:</span>
                    <button 
                      onClick={(e) => toggleExpansion(cardId, 'expandedComparison', e)}
                      className="expand-btn"
                    >
                      {cardState.expandedComparison ? '▼ Collapse' : '▶ Expand'}
                    </button>
                  </div>
                  <div className="evidence-text">
                    "{cardState.expandedComparison 
                      ? comparison.comparisonNarrativeSpan 
                      : truncateText(comparison.comparisonNarrativeSpan)}"
                  </div>
                </div>
              )}
            </div>

            {/* AI-generated analysis section (now default for all cards) */}
            {aiEnhanced && (
              <div className="ai-enhanced-section">
                <div className="ai-insight">
                  <h5>🧠 Psychological Insight:</h5>
                  <p>{aiEnhanced.psychologicalInsight}</p>
                </div>
                
                <div className="ai-insight">
                  <h5>📈 Developmental Significance:</h5>
                  <p>{aiEnhanced.developmentalSignificance}</p>
                </div>
                
                <div className="ai-insight">
                  <h5>💡 Actionable Insight:</h5>
                  <p>{aiEnhanced.actionableInsight}</p>
                </div>
                
                <div className="ai-attribution">
                  <small>Generated by AI using GPT-4o-mini</small>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    );
  };

  const getAllCards = () => {
    if (!diffResult) return [];
    return [
      ...diffResult.holistic,
      ...diffResult.overlapping,
      ...diffResult.unique.mainNarrative,
      ...diffResult.unique.comparisonNarrative,
      ...diffResult.conflicts
    ];
  };

  const renderHolisticSummary = () => {
    // Use AI-generated summary if available, otherwise fall back to default
    const summaryPoints = aiHolisticSummary || [
      "🤖 AI analysis in progress - comprehensive identity comparison being generated",
      "All comparison cards below are created using advanced AI narrative analysis",
      "This represents a fully AI-driven approach to understanding identity development patterns"
    ];

    return (
      <div className="holistic-summary">
        <div className="summary-header">
          <h4>Summary</h4>
          {isGeneratingHolisticSummary && (
            <span className="loading-indicator">Analyzing identity patterns...</span>
          )}
        </div>
        <ul className="summary-points">
          {summaryPoints.map((point, index) => (
            <li key={index} className="summary-point">{point}</li>
          ))}
        </ul>
        {/* <div className="ai-attribution">
          <small>
            {aiHolisticSummary 
              ? 'Generated by GPT-4o-mini based on comprehensive narrative analysis' 
              : 'All comparison cards below are generated by AI - no hard-coded rules used'
            }
          </small>
        </div> */}
      </div>
    );
  };

  const renderCurrentView = () => {
    if (!diffResult) return null;

    switch (currentView) {
      case 'holistic':
        const allCards = getAllCards();
        return (
          <div className="comparison-view holistic-view">
            <div className="holistic-upper">
              {renderHolisticSummary()}
            </div>
            
            <div className="holistic-lower">
              <div className="thumbnail-section">
                <h4 className="comparison-cards-title">Comparison Cards</h4>
                <div className="thumbnail-grid">
                  {allCards.map((card, index) => renderComparisonCard(card, index, true))}
                </div>
              </div>
            </div>
          </div>
        );
      
      case 'overlapping':
        return (
          <div className="comparison-view">
            <p className="view-description">
              ℹ️ Shared identity themes between versions
            </p>
            <div className="cards-container">
              {diffResult.overlapping.length > 0 ? 
                diffResult.overlapping.map((card, index) => renderComparisonCard(card, index)) :
                <div className="no-themes">No overlapping themes found.</div>
              }
            </div>
          </div>
        );
      
      case 'unique':
        return (
          <div className="comparison-view">
            <p className="view-description">
            ℹ️ Themes appearing in only one version
            </p>
            
            <div className="unique-sections">
              <div className="unique-main">
                <h4>Main Version Only</h4>
                <div className="cards-container">
                  {diffResult.unique.mainNarrative.length > 0 ? 
                    diffResult.unique.mainNarrative.map((card, index) => renderComparisonCard(card, index)) :
                    <div className="no-themes">No unique themes found.</div>
                  }
                </div>
              </div>
              
              <div className="unique-comparison">
                <h4>Comparison Version Only</h4>
                <div className="cards-container">
                  {diffResult.unique.comparisonNarrative.length > 0 ? 
                    diffResult.unique.comparisonNarrative.map((card, index) => renderComparisonCard(card, index)) :
                    <div className="no-themes">No unique themes found.</div>
                  }
                </div>
              </div>
            </div>
          </div>
        );
      
      case 'conflicts':
        return (
          <div className="comparison-view">
            <p className="view-description">
            ℹ️ Contradictory identity representations
            </p>
            <div className="cards-container">
              {diffResult.conflicts.length > 0 ? 
                diffResult.conflicts.map((card, index) => renderComparisonCard(card, index)) :
                <div className="no-themes">No identity conflicts detected.</div>
              }
            </div>
          </div>
        );
    }
  };

  if (isAnalyzing) {
    return (
      <div className="diff-editor-container">
        <div className="analyzing-state">
          <div className="spinner"></div>
          <h3>Analyzing Identity Themes...</h3>
          <p>Comparing affective, motivational, integrative, and structural elements.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="diff-editor-container">
      <div className="diff-header">
        <div className="view-selector">
          {(['holistic', 'unique', 'conflicts', 'overlapping'] as ViewMode[]).map((mode) => (
            <button
              key={mode}
              onClick={() => setCurrentView(mode)}
              className={`view-button ${currentView === mode ? 'active' : ''}`}
            >
              {mode === 'holistic' ? 'Overview' : mode.charAt(0).toUpperCase() + mode.slice(1)}
            </button>
          ))}
        </div>
      </div>

      <div className="diff-content">
        <div className="analysis-panel full-width">
          {renderCurrentView()}
        </div>
      </div>

      {confirmAction.show && (
        <div className="confirmation-overlay">
          <div className="confirmation-modal">
            <h4>Confirm Action</h4>
            <p>
              Are you sure you want to {confirmAction.action === 'ignore' ? 'ignore' : 'resolve'} this theme comparison?
              {confirmAction.action === 'merge' && ' This will use AI to automatically merge the theme.'}
            </p>
            <div className="confirmation-actions">
              <button 
                onClick={confirmActionHandler}
                className={`confirm-btn ${confirmAction.action === 'ignore' ? 'ignore' : 'resolve'}`}
              >
                Yes, {confirmAction.action === 'ignore' ? 'Ignore' : 'Resolve'}
              </button>
              <button 
                onClick={cancelAction}
                className="cancel-btn"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DiffTiptapEditor; 